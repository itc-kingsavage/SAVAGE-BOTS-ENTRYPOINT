name: 🦅 Deploy SAVAGE BOTS SCANNER

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18.x'
  RENDER_SERVICE_NAME: 'savage-bots-scanner'

jobs:
  # Security and code quality checks
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🚫 Check for exposed secrets
      run: |
        echo "🔍 Scanning for exposed secrets..."
        if git log -p | grep -E "(SCANNER_PASSWORD|MONGODB_URI|SESSION_ENCRYPTION_KEY|api[_-]?key|password|secret|token)" | grep -v "your_"; then
          echo "❌ CRITICAL: Potential secrets detected in commit history!"
          exit 1
        else
          echo "✅ No secrets found in commit history"
        fi

    - name: 📁 Check required files
      run: |
        echo "📋 Verifying project structure..."
        required_files=("package.json" "savage-scanner.js" "config/database.js" "auth/sessionManager.js")
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            exit 1
          else
            echo "✅ Found: $file"
          fi
        done
        echo "🎯 All required files present!"

  # Build and test the application
  build-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ⎔ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package.json
        
    - name: 📦 Install dependencies
      run: |
        echo "📥 Installing dependencies..."
        npm ci
        echo "✅ Dependencies installed"
        
    - name: 🔍 Run security audit
      run: |
        echo "🛡️ Running security audit..."
        npm audit --audit-level=high || true
        echo "✅ Security audit completed"
        
    - name: 🧪 Test build
      run: |
        echo "🏗️ Testing build process..."
        npm run build --if-present
        echo "✅ Build test passed"
        
    - name: 📊 Size check
      run: |
        echo "📏 Checking bundle size..."
        du -sh node_modules/ || echo "⚠️ Could not check node_modules size"
        find . -name "*.js" -not -path "./node_modules/*" -exec du -ch {} + | tail -1 || echo "⚠️ Could not check JS files size"

  # Deploy to Render
  deploy-render:
    name: 🚀 Deploy to Render
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ⎔ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🧹 Production optimization
      run: |
        echo "🧹 Optimizing for production..."
        npm prune --production
        echo "✅ Production optimization complete"
        
    - name: 📁 Create deployment package
      run: |
        echo "📦 Creating deployment package..."
        tar -czf deploy-package.tar.gz \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='node_modules' \
          --exclude='*.log' \
          .
        echo "✅ Deployment package created"
        
    - name: 🎯 Deploy to Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
        
    - name: ⏰ Wait for deployment
      run: |
        echo "⏰ Waiting for deployment to complete..."
        sleep 30
        echo "✅ Deployment wait completed"

  # Health check after deployment
  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: deploy-render
    if: always()
    
    steps:
    - name: 🔍 Check service health
      run: |
        echo "🏥 Performing health check..."
        SERVICE_URL="https://${{ env.RENDER_SERVICE_NAME }}.onrender.com"
        echo "🔗 Testing: $SERVICE_URL"
        
        # Wait for service to be ready
        for i in {1..10}; do
          if curl -f -s --retry 3 --retry-delay 5 "$SERVICE_URL" > /dev/null; then
            echo "✅ Service is healthy and responding"
            break
          else
            echo "⏳ Service not ready yet, attempt $i/10"
            sleep 10
          fi
        done

  # Database backup verification
  db-backup-check:
    name: 💾 Database Check
    runs-on: ubuntu-latest
    needs: deploy-render
    if: always()
    
    steps:
    - name: 📋 Database status
      run: |
        echo "🗃️ Database Configuration Check"
        echo "================================"
        echo "🔐 MongoDB URI: Set in secrets"
        echo "🔑 Encryption Key: Set in secrets" 
        echo "📊 Session Backup: Dual (MongoDB + Render Disk)"
        echo "🔄 Auto-recovery: Enabled"
        echo "================================"

  # Final deployment report
  deployment-report:
    name: 📊 Deployment Report
    runs-on: ubuntu-latest
    needs: [security-scan, build-test, deploy-render, health-check, db-backup-check]
    if: always()
    
    steps:
    - name: 📈 Generate report
      run: |
        echo "🦅 SAVAGE BOTS SCANNER DEPLOYMENT REPORT"
        echo "========================================"
        echo "📅 Deployment Time: $(date)"
        echo "🔗 Repository: ${{ github.repository }}"
        echo "🏷️ Branch: ${{ github.ref }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "👤 Triggered by: ${{ github.actor }}"
        echo ""
        echo "📊 JOB STATUS:"
        echo "🔒 Security Scan: ${{ needs.security-scan.result }}"
        echo "🏗️ Build & Test: ${{ needs.build-test.result }}"
        echo "🚀 Render Deploy: ${{ needs.deploy-render.result }}"
        echo "🏥 Health Check: ${{ needs.health-check.result }}"
        echo "💾 Database Check: ${{ needs.db-backup-check.result }}"
        echo ""
        echo "🔗 Service URL: https://${{ env.RENDER_SERVICE_NAME }}.onrender.com"
        echo "📱 Scanner Access: https://${{ env.RENDER_SERVICE_NAME }}.onrender.com"
        echo "========================================"
        
    - name: 🎉 Deployment Success
      if: success()
      run: |
        echo "🎉 SAVAGE BOTS SCANNER DEPLOYED SUCCESSFULLY!"
        echo "🦅 Your scanner is now live and ready for WhatsApp linking!"
        echo "🔐 Password: Set in GitHub Secrets"
        echo "📱 Access: https://${{ env.RENDER_SERVICE_NAME }}.onrender.com"
        
    - name: 📢 Discord Notification
      uses: sarisia/actions-status-discord@v1
      if: always() && github.ref == 'refs/heads/main'
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        title: "🦅 SAVAGE BOTS SCANNER Deployment"
        description: |
          **Status**: ${{ job.status }}
          **Branch**: ${{ github.ref }}
          **Commit**: ${{ github.sha[:7] }}
        color: ${{ job.status == 'success' && '0x00FF00' || '0xFF0000' }}
        url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  # Cleanup on failure
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: 🚨 Cleanup failed deployment
      run: |
        echo "🧹 Cleaning up failed deployment..."
        echo "⚠️ Deployment failed - check logs above for errors"
        echo "🔧 Common issues:"
        echo "   - Missing GitHub Secrets"
        echo "   - MongoDB connection issues"
        echo "   - Build errors in dependencies"
